#version 420
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shading_language_420pack : require

vec4 ImmCB_0_0_0[4];
uniform     vec4 _AdditionalLightCount;
uniform     vec4 _AdditionalLightPosition[16];
uniform     vec4 _AdditionalLightColor[16];
uniform     vec4 _AdditionalLightDistanceAttenuation[16];
uniform     vec4 _AdditionalLightSpotDir[16];
uniform     vec4 _AdditionalLightSpotAttenuation[16];
uniform     vec3 _WorldSpaceCameraPos;
uniform     vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform     vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform     vec4 unity_SHBr;
uniform     vec4 unity_SHBg;
uniform     vec4 unity_SHBb;
uniform     vec4 unity_SHC;
uniform     vec4 unity_LightIndicesOffsetAndCount;
uniform     vec4 unity_4LightIndices0;
uniform     vec4 unity_4LightIndices1;
uniform     vec4 unity_FogParams;
uniform     vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform     vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD6;
out vec4 vs_TEXCOORD7;
vec3 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec4 u_xlat5;
float u_xlat10;
ivec2 u_xlati10;
float u_xlat18;
int u_xlati18;
float u_xlat20;
int u_xlati20;
int u_xlati21;
float u_xlat22;
void main()
{
    ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
    ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
    ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
    ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 1.17549435e-38);
    u_xlat18 = inversesqrt(u_xlat18);
    vs_TEXCOORD6.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat3 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    vs_TEXCOORD1.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    u_xlati18 = int(_AdditionalLightCount.x);
    u_xlat20 = min(_AdditionalLightCount.y, unity_LightIndicesOffsetAndCount.y);
    u_xlati20 = int(u_xlat20);
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati21 = u_xlati18;
    while(true){
        u_xlatb4 = u_xlati21>=u_xlati20;
        if(u_xlatb4){break;}
        u_xlatb4 = u_xlati21<4;
        u_xlat5 = (bool(u_xlatb4)) ? unity_4LightIndices0 : unity_4LightIndices1;
        u_xlati10.xy = ivec2(u_xlati21) + ivec2(int(0xFFFFFFFCu), 1);
        u_xlati4 = (u_xlatb4) ? u_xlati21 : u_xlati10.x;
        u_xlat4.x = dot(u_xlat5, ImmCB_0_0_0[u_xlati4]);
        u_xlati4 = int(u_xlat4.x);
        u_xlat5.xyz = (-u_xlat0.xyz) * _AdditionalLightPosition[u_xlati4].www + _AdditionalLightPosition[u_xlati4].xyz;
        u_xlat10 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat10 = max(u_xlat10, 1.17549435e-38);
        u_xlat22 = inversesqrt(u_xlat10);
        u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
        u_xlat22 = u_xlat10 * _AdditionalLightDistanceAttenuation[u_xlati4].x + 1.0;
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat10 = u_xlat10 * _AdditionalLightDistanceAttenuation[u_xlati4].y + _AdditionalLightDistanceAttenuation[u_xlati4].z;
        u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
        u_xlat10 = u_xlat10 * u_xlat22;
        u_xlat22 = dot(_AdditionalLightSpotDir[u_xlati4].xyz, u_xlat5.xyz);
        u_xlat22 = u_xlat22 * _AdditionalLightSpotAttenuation[u_xlati4].x + _AdditionalLightSpotAttenuation[u_xlati4].y;
        u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
        u_xlat22 = u_xlat22 * u_xlat22;
        u_xlat10 = u_xlat22 * u_xlat10;
        u_xlat4.xyw = vec3(u_xlat10) * _AdditionalLightColor[u_xlati4].xyz;
        u_xlat5.x = dot(u_xlat2.xyz, u_xlat5.xyz);
        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
        u_xlat3.xyz = u_xlat4.xyw * u_xlat5.xxx + u_xlat3.xyz;
        u_xlati21 = u_xlati10.y;
    }
    vs_TEXCOORD7.yzw = u_xlat3.xyz;
    vs_TEXCOORD7.x = u_xlat1.z * unity_FogParams.x;
    vs_TEXCOORD1.w = 0.0;
    gl_Position = u_xlat1;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz;
    return;
}
